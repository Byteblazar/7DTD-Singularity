<Byteblazar>
    <append xpath="/blocks">
        <block name="SingularityConfig">
            <property name="Extends" value="terrDesertGround"/>

            <property class="XMLExtensions">
			
				<!--
					Automatic Changes:
					==================
					
					Singularity adds the following new entity classes for use in AITask/AITarget properties:
				
						EntityAnimalChicken (inherits from EntityAnimalRabbit)
						
						EntityAnimalBear (inherits from EntityEnemyAnimal)
						EntityAnimalBoar (inherits from EntityEnemyAnimal)
						EntityAnimalMountainLion (inherits from EntityEnemyAnimal)
						
						EntityAnimalWolf (inherits from EntityEnemyAnimal)
							EntityAnimalCoyote (inherits from EntityAnimalWolf)
							
						EntityAnimalSupernatural (inherits from EntityEnemyAnimal)
							EntityAnimalBossGrace (inherits from EntityAnimalSupernatural)
							EntityAnimalDireWolf (inherits from EntityAnimalSupernatural)
							EntityAnimalZombieBear (inherits from EntityAnimalSupernatural)
							
						EntityZombieSmart (inherits from EntityZombie)
							EntityZombieScreamer (inherits from EntityZombieSmart)
							
					Note that these have no effect unless first declared in entity_classes as "Class" properties:
						
						<entity_class name="Platypus"/>
							<property name="Class" value="EntityAnimalChicken"/>
				-->
				
                <property name="ShaderlessFX" value="false"/>
				 <!-- 
					Adds two new screen effects: Singularity_Snapshot and Singularity_Overlay. They can be used via XML as ModifyScreenEffect triggered actions. Singularity_Snapshot takes a snapshot of the whole screen and applies it as an overlay. 
				 
						Example:
						<triggered_effect trigger="onSelfBuffStart" action="ModifyScreenEffect" fade="1" effect_name="Singularity_Snapshot"/>
				 
					Singularity_Overlay applies a uniform color overlay. By default the overlay will be white, but you can optionally declare a "color" attribute (rgba).
				 
						Examples:
						<triggered_effect trigger="onSelfBuffStart" action="ModifyScreenEffect" intensity="1" fade=".8" effect_name="Singularity_Overlay"/> 
						<triggered_effect trigger="onSelfBuffStart" action="ModifyScreenEffect" intensity=".5" fade="1" effect_name="Singularity_Overlay" color="FF0000"/> 
				 -->
                <property name="EntityStun" value="false"/>
				<!-- 
					Any entity with a "Singularity_Stunned" CVar value greater than 0 will stop chasing and looking at other entities. They will still get alerted and even attack enemies within their reach, but they will not move from their position or turn to face them outside of that range. For compatibility between mods, it's recommended to use add and subtract operations instead of set (add 1 to initiate the stun, subtract 1 when done). 
				-->
                <property name="NonlethalExplosives" value="false"/>
				<!-- 
					Adds a new "Singularity_IsNonlethalExplosive" property that can be added to explosives via XML to prevent them from dealing damage but still apply whatever buffs they have set in "Explosion.Buffs" to all targets within their blast radius (not ignoring cover). 
				-->
                <property name="AmmoSounds" value="false"/>
				<!-- 
					Adds two new properties for ammo: "Singularity_Sound_start" and "Singularity_Sound_loop" that override the respective weapon sounds when using that ammo.
				-->
                <property name="EntityGregariousness" value="false"/>
				<!-- 
					Any entity_class with a Singularity_Gregariousness property will have a chance of assisting other entities of its class that are getting attacked nearby (normalized percentage from 0.0 to 1.0). Example with 50% chance:
					
					<property name="Singularity_Gregariousness" value="0.5"/>
				-->
                <property name="SetAsTargetIfHurt_BypassSameTypeCheck" value="false"/>
				<!-- 
					This feature removes the requirement from SetAsTargetIfHurt AITarget tasks for entities to be of different entityType (enum).
				-->
                <property name="RunawayFromEntity_NoImplicitPlayer" value="false"/>
				<!-- 
					This feature makes it so RunawayFromEntity doesn't automatically cause entities to run away from players. Players must then be declared explicitly in XML when that behavior is desired.
				-->
                <property name="SetNearestCorpseAsTarget_Filters" value="false"/>
				<!-- 
					Extends SetNearestCorpseAsTarget in the following ways:
					- Adds a class parameter to filter by entity class (much like SetNearestEntityAsTarget, but simpler syntax)
					- Adds a cannibalistic parameter that gives each entity a chance of eating the remains of members of its own class (normalized percentage from 0.0 to 1.0). Defaults to 0.0 if not set (no cannibalism)
					
					Example:
					<property name="AITarget-1" value="SetNearestCorpseAsTarget" data="class=EntityAnimalRabbit,EntityAnimalBoar;cannibalismChance=0.20"/>
						
					The above example translates to: Entity will eat dead rabbits and boars nearby. If the entity itself is a rabbit or a boar, there will be a 20% chance it will be flagged as a cannibal upon spawning, and if so, it will eat the remains of other rabbits or boars, otherwise it won't.
				-->
            </property>

            <property class="ScreenEffects">
                <property name="DisableBloodDropsOverlay" value="false"/>
				<!-- Completely disables the blood drops overlay that occurs when players take damage from any source. -->
                <property name="UseCustomDrowningEffects" value="false"/>
				<!-- Replaces the blood drop overlay with custom effects when drowning. Requires ShaderlessFX. -->
                <property name="UseCustomBurningEffects" value="false"/>
				<!-- Replaces the blood drop overlay with custom effects when burning. Requires ShaderlessFX. -->
            </property>

        </block>
    </append>
</Byteblazar>